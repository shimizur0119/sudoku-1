---
import Layout from "../layouts/Layout.astro";
const length = 9;
const baseArray = new Array(length * length).fill(null);

const sudoku = baseArray.map((e, i) => {
  const row = Math.floor(i / length) + 1;
  const col = (i % length) + 1;

  return {
    index: i,
    id: `${row}-${col}`,
    group: null,
    value: null,
    memoList: [],
  };
});

// const sampleData = [
//   {
//     index: 0,
//     id: "1-1",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 1,
//     id: "1-2",
//     value: "1",
//     memoList: [],
//   },
//   {
//     index: 2,
//     id: "1-3",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 3,
//     id: "1-4",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 4,
//     id: "1-5",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 5,
//     id: "1-6",
//     value: "4",
//     memoList: [],
//   },
//   {
//     index: 6,
//     id: "1-7",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 7,
//     id: "1-8",
//     value: "6",
//     memoList: [],
//   },
//   {
//     index: 8,
//     id: "1-9",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 9,
//     id: "2-1",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 10,
//     id: "2-2",
//     value: "8",
//     memoList: [],
//   },
//   {
//     index: 11,
//     id: "2-3",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 12,
//     id: "2-4",
//     value: "5",
//     memoList: [],
//   },
//   {
//     index: 13,
//     id: "2-5",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 14,
//     id: "2-6",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 15,
//     id: "2-7",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 16,
//     id: "2-8",
//     value: "4",
//     memoList: [],
//   },
//   {
//     index: 17,
//     id: "2-9",
//     value: "2",
//     memoList: [],
//   },
//   {
//     index: 18,
//     id: "3-1",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 19,
//     id: "3-2",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 20,
//     id: "3-3",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 21,
//     id: "3-4",
//     value: "3",
//     memoList: [],
//   },
//   {
//     index: 22,
//     id: "3-5",
//     value: "8",
//     memoList: [],
//   },
//   {
//     index: 23,
//     id: "3-6",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 24,
//     id: "3-7",
//     value: "1",
//     memoList: [],
//   },
//   {
//     index: 25,
//     id: "3-8",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 26,
//     id: "3-9",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 27,
//     id: "4-1",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 28,
//     id: "4-2",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 29,
//     id: "4-3",
//     value: "2",
//     memoList: [],
//   },
//   {
//     index: 30,
//     id: "4-4",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 31,
//     id: "4-5",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 32,
//     id: "4-6",
//     value: "5",
//     memoList: [],
//   },
//   {
//     index: 33,
//     id: "4-7",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 34,
//     id: "4-8",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 35,
//     id: "4-9",
//     value: "4",
//     memoList: [],
//   },
//   {
//     index: 36,
//     id: "5-1",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 37,
//     id: "5-2",
//     value: "7",
//     memoList: [],
//   },
//   {
//     index: 38,
//     id: "5-3",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 39,
//     id: "5-4",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 40,
//     id: "5-5",
//     value: "3",
//     memoList: [],
//   },
//   {
//     index: 41,
//     id: "5-6",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 42,
//     id: "5-7",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 43,
//     id: "5-8",
//     value: "8",
//     memoList: [],
//   },
//   {
//     index: 44,
//     id: "5-9",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 45,
//     id: "6-1",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 46,
//     id: "6-2",
//     value: "3",
//     memoList: [],
//   },
//   {
//     index: 47,
//     id: "6-3",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 48,
//     id: "6-4",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 49,
//     id: "6-5",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 50,
//     id: "6-6",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 51,
//     id: "6-7",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 52,
//     id: "6-8",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 53,
//     id: "6-9",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 54,
//     id: "7-1",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 55,
//     id: "7-2",
//     value: "9",
//     memoList: [],
//   },
//   {
//     index: 56,
//     id: "7-3",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 57,
//     id: "7-4",
//     value: "6",
//     memoList: [],
//   },
//   {
//     index: 58,
//     id: "7-5",
//     value: "5",
//     memoList: [],
//   },
//   {
//     index: 59,
//     id: "7-6",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 60,
//     id: "7-7",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 61,
//     id: "7-8",
//     value: "7",
//     memoList: [],
//   },
//   {
//     index: 62,
//     id: "7-9",
//     value: "3",
//     memoList: [],
//   },
//   {
//     index: 63,
//     id: "8-1",
//     value: "7",
//     memoList: [],
//   },
//   {
//     index: 64,
//     id: "8-2",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 65,
//     id: "8-3",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 66,
//     id: "8-4",
//     value: "9",
//     memoList: [],
//   },
//   {
//     index: 67,
//     id: "8-5",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 68,
//     id: "8-6",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 69,
//     id: "8-7",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 70,
//     id: "8-8",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 71,
//     id: "8-9",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 72,
//     id: "9-1",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 73,
//     id: "9-2",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 74,
//     id: "9-3",
//     value: "5",
//     memoList: [],
//   },
//   {
//     index: 75,
//     id: "9-4",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 76,
//     id: "9-5",
//     value: "7",
//     memoList: [],
//   },
//   {
//     index: 77,
//     id: "9-6",
//     value: "8",
//     memoList: [],
//   },
//   {
//     index: 78,
//     id: "9-7",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 79,
//     id: "9-8",
//     value: "",
//     memoList: [],
//   },
//   {
//     index: 80,
//     id: "9-9",
//     value: "6",
//     memoList: [],
//   },
// ];
---

<Layout title="sudoku-1">
  <div class="s-sudoku">
    <div class="s-sudoku__inner">
      <h1 class="c-simpleTitle">SUDOKU</h1>
      <form class="s-sudoku__form" id="sudoku-input" action="">
        <div class="c-sudoku">
          <div class="c-sudoku__line"></div>
          <div class="c-sudoku__line"></div>
          <div class="c-sudoku__line"></div>
          <div class="c-sudoku__line"></div>
          {
            sudoku.map((e) => {
              return (
                <input
                  name={e.id}
                  type="number"
                  class="c-sudoku__input"
                  id={e.id}
                  value={e.value}
                  min="1"
                  max="9"
                />
              );
            })
          }
        </div>
        <div class="s-sudoku__btnWrap">
          <button class="c-submitBtn" type="submit">出力</button>
        </div>
      </form>
      <div id="result"></div>
    </div>
  </div>
</Layout>

<script>
  const length = 9;
  const baseArray = new Array(length * length).fill(null);

  let sudokuBase = baseArray.map((e, i) => {
    const row = Math.floor(i / length) + 1;
    const col = (i % length) + 1;
    const rowGroup = Math.ceil(row / 3);
    const colGroup = Math.ceil(col / 3);
    const group = colGroup + (rowGroup - 1) * 3;
    return {
      index: i,
      id: `${row}-${col}`,
      row: row,
      col: col,
      group: group,
      groupRow: rowGroup,
      groupCol: colGroup,
      value: null as number | null,
      memoList: [1, 2, 3, 4, 5, 6, 7, 8, 9],
    };
  });

  const sudokuInput = document.getElementById("sudoku-input");

  const createResult = (sudoku: any) => {
    const result = document.getElementById("result");
    const container = document.createElement("div");
    const createLine = () => {
      const line = document.createElement("div");
      line.classList.add("c-sudoku__line");
      return line;
    };
    container.appendChild(createLine());
    container.appendChild(createLine());
    container.appendChild(createLine());
    container.appendChild(createLine());
    container.classList.add("c-sudoku");
    sudoku.forEach((e: any) => {
      const cell = document.createElement("div");
      cell.classList.add("c-sudoku__input");
      cell.textContent = e.value;
      if (!e.initial) {
        cell.classList.add("u-answer");
      }
      container.appendChild(cell);
    });
    result?.appendChild(container);
  };

  const addMemo = (sudoku: any) => {
    console.log("addMemo");
    let _sudoku = sudoku.map((data: any) => {
      if (data.value) {
        return {
          ...data,
          memoList: [data.value],
        };
      }

      const rows = sudoku
        .filter((e: any) => e.value && e.row === data.row)
        .map((e: any) => e.value);
      const cols = sudoku
        .filter((e: any) => e.value && e.col === data.col)
        .map((e: any) => e.value);
      const groups = sudoku
        .filter((e: any) => e.value && e.group === data.group)
        .map((e: any) => e.value);

      const memoList = data.memoList.filter((num: number) => {
        const inRow = rows.includes(num);
        const inCol = cols.includes(num);
        const inGroup = groups.includes(num);
        return !inRow && !inCol && !inGroup;
      });

      const result = {
        ...data,
        value: memoList.length === 1 ? memoList[0] : null,
        data_rows: rows,
        data_cols: cols,
        data_groups: groups,
        memoList: memoList,
      };

      return result;
    });

    const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];
    numbers.forEach((num) => {
      // まずgroupごとで考える
      const groupDatas = _sudoku.filter((e: any) => e.group === num);
      const dataValues = groupDatas
        .map((e: any) => e.value)
        .filter((e: any) => e);
      // その中で数字ごとに考える
      numbers.forEach((n) => {
        if (dataValues.includes(n)) return;
        // メモに含まれるのが同じrowだけかをチェック
        const sameNumDatas = groupDatas.filter((e: any) =>
          e.memoList.includes(n)
        );
        const onlySameRow = sameNumDatas
          .map((e: any) => e.row)
          .every((e: any, i: number, arr: any) => e === arr[0]);
        const onlySameCol = sameNumDatas
          .map((e: any) => e.col)
          .every((e: any, i: number, arr: any) => e === arr[0]);
        const currentData = groupDatas.find((e: any) => e.memoList.includes(n));

        // 同じrowだけに含まれる場合
        if (onlySameRow) {
          const targetRow = currentData.row;
          console.log("targetRow", targetRow, "num", num, "n", n);
          _sudoku = _sudoku.map((e: any) => {
            if (e.row !== targetRow || e.group === num) return e;
            return {
              ...e,
              memoList: e.memoList.filter((e: any) => e !== n),
            };
          });
        }
        // 同じcolだけに含まれる場合
        if (onlySameCol) {
          const targetCol = currentData.col;
          console.log("targetCol", targetCol, "num", num, "n", n);
          _sudoku = _sudoku.map((e: any) => {
            if (e.col !== targetCol || e.group === num) return e;
            return {
              ...e,
              memoList: e.memoList.filter((e: any) => e !== n),
            };
          });
        }
      });

      // rowで考える
      const rowDatas = _sudoku.filter((e: any) => e.row === num);
      // その中で数字ごとに考える
      numbers.forEach((n) => {
        const rowValues = rowDatas
          .map((e: any) => e.value)
          .filter((e: any) => e);
        // すでに数字が入っている場合はスキップ
        if (rowValues.includes(n)) return;
        // メモ内の唯一の数字かを確認
        const sameRowMemoDatas = rowDatas.filter((e: any) =>
          e.memoList.includes(n)
        );
        // 唯一の場合
        if (sameRowMemoDatas.length === 1) {
          const targetData = sameRowMemoDatas[0];
          console.log("targetData", targetData, "num", num, "n", n);
          _sudoku = _sudoku.map((e: any) => {
            if (e.index !== targetData.index) return e;
            return {
              ...e,
              value: n,
            };
          });
        }
      });
    });

    const edit = _sudoku.map((e: any) => e.value + e.memoList.join(""));
    const arg = sudoku.map((e: any) => e.value + e.memoList.join(""));
    if (edit.toString() !== arg.toString()) {
      console.log("not same");
      console.log(edit);
      console.log(arg);
      _sudoku = addMemo(_sudoku);
    }

    return _sudoku;
  };

  // submit
  sudokuInput?.addEventListener("submit", (formEvent: any) => {
    formEvent.preventDefault();
    // inputからデータを取得して整形
    let sudoku = sudokuBase.map((e) => {
      const value = formEvent.target[`${e.id}`].value;
      return {
        ...e,
        initial: !!value,
        value: value ? Number(value) : null,
      };
    });
    console.log("回答");

    try {
      sudoku = addMemo(sudoku);
      console.log("結果", sudoku);

      // 空入力かをチェック
      const empty = !!sudoku.filter((e) => e.value).length;
      if (!empty) {
        alert("空ですよー");
        return;
      }

      // 埋められているかをチェック
      const notFilled = !!sudoku.filter((e) => !e.value).length;
      if (notFilled) {
        alert("入力値がおかしいかも、、？");
        return;
      }

      createResult(sudoku);
    } catch (e) {
      alert("入力値がおかしいかも、、？");
    }
  });
</script>
